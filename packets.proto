syntax = "proto3";
package proto.packet;

option csharp_namespace = "TournamentAssistantShared.Models.Packets";

import "discord.proto";
import "models.proto";


// ---- Commands (DO something!) ---- //
message Command {
  message LoadSong {
    string level_id = 1;
    string custom_host_url = 2;
  }

  message PlaySong {
    models.GameplayParameters gameplay_parameters = 1;
    bool floating_scoreboard = 3;
    bool stream_sync = 4;
    bool disable_fail = 5;
    bool disable_pause = 6;
    bool disable_scoresaber_submission = 7;
    bool show_normal_notes_on_stream = 8;
  }

  message SendBotMessage {
    discord.Channel channel = 1;
    string message = 2;
  }

  message ShowModal {
    string modal_id = 1;
    string message_title = 2;
    string message_text = 3;
    bool can_close = 4;
    models.ModalOption option_1 = 5;
    models.ModalOption option_2 = 6;
  }

  oneof type {
    bool heartbeat = 1; //Is this really a command?
    bool return_to_menu = 2;
    bool delay_test_finish = 3;
    bool stream_sync_show_image = 4;
    LoadSong load_song = 5;
    PlaySong play_song = 6;
    SendBotMessage send_bot_message = 7;
    ShowModal show_modal = 8;
    string discord_authorize = 9;
  }
}

// ---- Pushes (SUBMIT something!) ---- //
message Push {
  message SongFinished {
    enum CompletionType {
      Passed = 0;
      Failed = 1;
      Quit = 2;
    }

    models.User player = 1;
    models.Beatmap beatmap = 2;
    CompletionType type = 3;
    int32 score = 4;
  }

  message DiscordAuthorized {
    bool success = 1;
  }

  oneof data {
    models.LeaderboardScore leaderboard_score = 1;
    models.RealtimeScore realtime_score = 2;
    SongFinished song_finished = 3;
    DiscordAuthorized discord_authorized = 4;
  }
}

// ---- Requests (GET (or do?) something where you need a response!) ---- //
message Request {
  message Info {
    int32 client_version = 1;
  }

  message Connect {
    models.User user = 1;
    string tournament_id = 2;
    string password = 3;
  }

  message LeaderboardScore {
    string event_id = 1;
    models.GameplayParameters parameters = 2;
  }

  message PreloadImageForStreamSync {
    string file_id = 1;
    bool compressed = 2;
    bytes data = 3;
  }

  oneof type {
    Connect connect = 1;
    Info info = 2;
    LeaderboardScore leaderboard_score = 3;
    PreloadImageForStreamSync preload_image_for_stream_sync = 4;
  }
}

// ---- Responses ---- //
message Response {
  enum ResponseType {
    Fail = 0;
    Success = 1;
  }

  enum InfoFailReason {
    IncorrectVersion = 0;
  }

  enum ConnectFailReason {
    IncorrectPassword = 0;
  }
  
  message Info {
    models.State state = 1;
    int32 server_version = 2;
    string message = 3;
    InfoFailReason reason = 4;
  }
  
  message Connect {
    models.State state = 1;
    string self_guid = 2;
    string message = 3;
    ConnectFailReason reason = 4;
  }

  message LeaderboardScores {
    repeated models.LeaderboardScore scores = 1;
  }

  message LoadedSong {
    models.PreviewBeatmapLevel level = 1;
  }

  message Modal {
      string modal_id = 1;
      string value = 2;
  }

  message ModifyQualifier {
    string message = 1;
  }

  message ModifyTournament {
    string message = 1;
  }

  message ImagePreloaded {
    string file_id = 1;
  }

  ResponseType type = 1;
  string responding_to_packet_id = 2;
  oneof details {
    Connect connect = 3;
    Info info = 4;
    LeaderboardScores leaderboard_scores = 5;
    LoadedSong loaded_song = 6;
    Modal modal = 7;
    ModifyQualifier modify_qualifier = 8;
    ModifyTournament modify_tournament = 9;
    ImagePreloaded image_preloaded = 10;
  }
}

// ---- Backbone ---- //
message Acknowledgement {
  enum AcknowledgementType {
    MessageReceived = 0;
  }

  string packet_id = 1;
  AcknowledgementType type = 2;
}

message ForwardingPacket {
  repeated string forward_to = 1;
  Packet packet = 2;
}

message Event {
  message UserAdded {
    string tournament_guid = 1;
    models.User user = 2;
  }

  message UserUpdated {
    string tournament_guid = 1;
    models.User user = 2;
  }

  message UserLeft {
    string tournament_guid = 1;
    models.User user = 2;
  }

  message MatchCreated {
    string tournament_guid = 1;
    models.Match match = 2;
  }

  message MatchUpdated {
    string tournament_guid = 1;
    models.Match match = 2;
  }

  message MatchDeleted {
    string tournament_guid = 1;
    models.Match match = 2;
  }

  message QualifierCreated {
    string tournament_guid = 1;
    models.QualifierEvent event = 2;
  }

  message QualifierUpdated {
    string tournament_guid = 1;
    models.QualifierEvent event = 2;
  }

  message QualifierDeleted {
    string tournament_guid = 1;
    models.QualifierEvent event = 2;
  }

  message TournamentCreated {
    models.Tournament tournament = 1;
  }

  message TournamentUpdated {
    models.Tournament tournament = 1;
  }

  message TournamentDeleted {
    models.Tournament tournament = 1;
  }

  message ServerAdded {
    models.CoreServer server = 1;
  }

  message ServerDeleted {
    models.CoreServer server = 1;
  }

  oneof changed_object {
    UserAdded user_added = 1;
    UserUpdated user_updated = 2;
    UserLeft user_left = 3;
    MatchCreated match_created = 6;
    MatchUpdated match_updated = 7;
    MatchDeleted match_deleted = 8;
    QualifierCreated qualifier_created = 9;
    QualifierUpdated qualifier_updated = 10;
    QualifierDeleted qualifier_deleted = 11;
    TournamentCreated tournament_created = 12;
    TournamentUpdated tournament_updated = 13;
    TournamentDeleted tournament_deleted = 14;
    ServerAdded server_added = 15;
    ServerDeleted server_deleted = 16;
  }
}

message Packet {
  string id = 1;
  string from = 2;
  oneof packet {
    Acknowledgement acknowledgement = 3;
    ForwardingPacket forwarding_packet = 4;
    Command command = 5;
    Push push = 6;
    Request request = 7;
    Response response = 8;
    Event event = 9;
  }
}