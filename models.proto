syntax = "proto3";
package proto.models;

option csharp_namespace = "TournamentAssistantShared.Models";

import "discord.proto";

message Characteristic {
  string serialized_name = 1;
  repeated int32 difficulties = 2;
}

message Beatmap {
  string name = 1;
  string level_id = 2;
  Characteristic characteristic = 3;
  int32 difficulty = 4;
}

message GameplayModifiers {
  enum GameOptions {
    None = 0;

    //Negative modifiers
    NoFail = 1;
    NoBombs = 2;
    NoArrows = 4;
    NoObstacles = 8;
    SlowSong = 16;

    //Positive Modifiers
    InstaFail = 32;
    FailOnClash = 64;
    BatteryEnergy = 128;
    FastNotes = 256;
    FastSong = 512;
    DisappearingArrows = 1024;
    GhostNotes = 2048;

    //1.12.2 Additions
    DemoNoFail = 4096;
    DemoNoObstacles = 8192;
    StrictAngles = 16384;

    //1.13.4 Additions
    ProMode = 32768;
    ZenMode = 65536;
    SmallCubes = 131072;
    SuperFastSong = 262144;
  }
  GameOptions options = 1;
}

message PlayerSpecificSettings {
  enum PlayerOptions {
    NoPlayerOptions = 0;
    LeftHanded = 1;
    StaticLights = 2;
    NoHud = 4;
    AdvancedHud = 8;
    ReduceDebris = 16;
    AutoPlayerHeight = 32;
    NoFailEffects = 64;
    AutoRestart = 128;
    HideNoteSpawnEffect = 256;
    AdaptiveSfx = 512;
    ArcsHapticFeedback = 1024;
  }

  enum NoteJumpDurationTypeSettings {
    Dynamic = 0;
    Static = 1;
  }

  enum ArcVisibilityType {
    None = 0;
    Low = 1;
    Standard = 2;
    High = 3;
  }

  float player_height = 1;
  float sfx_volume = 2;
  float saber_trail_intensity = 3;
  float note_jump_start_beat_offset = 4;
  float note_jump_fixed_duration = 5;
  PlayerOptions options = 6;
  NoteJumpDurationTypeSettings note_jump_duration_type_settings = 7;
  ArcVisibilityType arc_visibility_type = 8;
}

message GameplayParameters {
  Beatmap beatmap = 1;
  PlayerSpecificSettings player_settings = 2;
  GameplayModifiers gameplay_modifiers = 3;
  int32 attempts = 4; // Qualifiers only
  bool show_scoreboard = 5;
  bool disable_pause = 6;
  bool disable_fail = 7;
  bool disable_scoresaber_submission = 8;
  bool disable_custom_notes_on_stream = 9;
}

message Map {
  string guid = 1;
  GameplayParameters gameplay_parameters = 2;
}

message User {
  enum PlayStates {
    InMenu = 0;
    WaitingForCoordinator = 1;
    InGame = 2;
  }

  enum DownloadStates {
    None = 0;
    Downloading = 1;
    Downloaded = 2;
    DownloadError = 3;
  }

  enum ClientTypes {
    Player = 0;
    WebsocketConnection = 1;
  }

  message DiscordInfo {
    string user_id = 1;
    string username = 2;
    string avatar_url = 3;
  }

  message Point {
    int32 x = 1;
    int32 y = 2;
  }

  string guid = 1;
  string name = 2;
  string platform_id = 3;
  ClientTypes client_type = 4;
  string team_id = 5;
  PlayStates play_state = 6;
  DownloadStates download_state = 7;
  repeated string mod_list = 8;
  Point stream_screen_coordinates = 9;
  int64 stream_delay_ms = 10;
  int64 stream_sync_start_ms = 11;
  DiscordInfo discord_info = 12;
  bytes user_image = 13;
}

message Match {
  string guid = 1;
  repeated string associated_users = 2;
  string leader = 3;
  Map selected_map = 5;
  string start_time = 8;
}

message QualifierEvent {
  enum EventSettings {
    None = 0;
    HideScoresFromPlayers = 1;
    DisableScoresaberSubmission = 2;
    EnableDiscordScoreFeed = 4;
    EnableDiscordLeaderboard = 8;
  }

  enum LeaderboardSort {
    ModifiedScore = 0;
    ModifiedScoreAscending = 1;
    NotesMissed = 2;
    NotesMissedAscending = 3;
    BadCuts = 4;
    BadCutsAscending = 5;
    MaxCombo = 6;
    MaxComboAscending = 7;
    GoodCuts = 8;
    GoodCutsAscending = 9;
  }

  string guid = 1;
  string name = 2;
  discord.Guild guild = 3;
  discord.Channel info_channel = 4;
  repeated Map qualifier_maps = 5;
  EventSettings flags = 6;
  LeaderboardSort sort = 7;
  bytes image = 8;
}

message CoreServer {
  string name = 1;
  string address = 2;
  int32 port = 3;
  int32 websocket_port = 4;
}

message Tournament {
  message TournamentSettings {
    message Pool {
      string guid = 1;
      string name = 2;
      repeated Map maps = 3;
    }

    message Team {
      string guid = 1;
      string name = 2;
      bytes image = 3;
    }

    string tournament_name = 1;
    bytes tournament_image = 2;
    bool enable_teams = 3;
    repeated Team teams = 4;
    int32 score_update_frequency = 5;
    repeated string banned_mods = 6;
    repeated Pool pools = 7;
  }

  string guid = 1;
  TournamentSettings settings = 2;
  repeated User users = 3;
  repeated Match matches = 4;
  repeated QualifierEvent qualifiers = 5;
  CoreServer server = 6;
}

message State {
  repeated Tournament tournaments = 1;
  repeated CoreServer known_servers = 2;
}

message ModalOption {
  string label = 1;
  string value = 2;
}

message LeaderboardEntry {
  string event_id = 1;
  string map_id = 2;
  string platform_id = 3;
  string username = 4;
  int32 multiplied_score = 5;
  int32 modified_score = 6;
  int32 max_possible_score = 7;
  float accuracy = 8;
  int32 notes_missed = 9;
  int32 bad_cuts = 10;
  int32 good_cuts = 11;
  int32 max_combo = 12;
  bool full_combo = 13;
  bool is_placeholder = 14;
  string color = 15;
}

message RealtimeScore {
  string user_guid = 1;
  int32 score = 2;
  int32 score_with_modifiers = 3;
  int32 max_score = 4;
  int32 max_score_with_modifiers = 5;
  int32 combo = 6;
  float player_health = 7;
  float accuracy = 8;
  float song_position = 9;
  int32 notes_missed = 10;
  int32 bad_cuts = 11;
  int32 bomb_hits = 12;
  int32 wall_hits = 13;
  int32 max_combo = 14;
  models.ScoreTrackerHand left_hand = 15;
  models.ScoreTrackerHand right_hand = 16;
}

message ScoreTrackerHand {
  int32 hit = 1;
  int32 miss = 2;
  int32 bad_cut = 3;
  repeated float avg_cut = 4;
}