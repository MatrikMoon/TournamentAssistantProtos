syntax = "proto3";
package proto.packets;

option csharp_namespace = "TournamentAssistantShared.Models.Packets";

import "models.proto";

// ---- Responses ---- //
message Response {
  enum ResponseType {
    Fail = 0;
    Success = 1;
  }

  //--- State Update Responses ---//
  message UpdateUser {
    string message = 1;
    models.User user = 2;
  }

  message CreateMatch {
    string message = 1;
    models.Match match = 2;
  }

  message UpdateMatch {
    string message = 1;
    models.Match match = 2;
  }

  message DeleteMatch {
    string message = 1;
    models.Match match = 2;
  }

  message CreateQualifierEvent {
    string message = 1;
    models.QualifierEvent qualifier = 2;
  }

  message UpdateQualifierEvent {
    string message = 1;
    models.QualifierEvent qualifier = 2;
  }

  message DeleteQualifierEvent {
    string message = 1;
    models.QualifierEvent qualifier = 2;
  }

  message AddAuthorizedUser {
    string tournament_id = 1;
    models.User user = 2;
    models.Permissions permission_flags = 3;
  }
  
  message UpdateAuthorizedUser {
    string tournament_id = 1;
    models.User user = 2;
    models.Permissions permission_flags = 3;
  }
  
  message RemoveAuthorizedUser {
    string tournament_id = 1;
    models.User user = 2;
    models.Permissions permission_flags = 3;
  }

  message GetAuthorizedUsers {
    message AuthroizedUser {
      string discord_id = 1;
      string discord_username = 2;
      string discord_avatar_url = 3;
      models.Permissions permission = 4;
    }

    string tournament_id = 1;
    repeated AuthroizedUser authorized_users = 2;
  }

  message CreateTournament {
    string message = 1;
    models.Tournament tournament = 2;
  }

  message UpdateTournament {
    string message = 1;
    models.Tournament tournament = 2;
  }

  message DeleteTournament {
    string message = 1;
    models.Tournament tournament = 2;
  }

  message AddServer {
    string message = 1;
    models.CoreServer server = 2;
  }

  // -- Other Responses --/
  message Connect {
    enum ConnectFailReason {
      IncorrectVersion = 0;
    }

    models.State state = 1;
    int32 server_version = 2;
    string message = 3;
    ConnectFailReason reason = 4;
  }
  
  message Join {
    enum JoinFailReason {
      IncorrectPassword = 0;
    }

    models.State state = 1;
    string self_guid = 2;
    string tournament_id = 3;
    string message = 4;
    JoinFailReason reason = 5;
  }

  message LeaderboardEntries {
    repeated models.LeaderboardEntry scores = 1;
  }

  message LoadSong {
    string level_id = 1;
  }

  message PreloadImageForStreamSync {
    string file_id = 1;
  }

  message ShowModal {
    string modal_id = 1;
    string value = 2;
  }

  message RemainingAttempts {
    int32 remaining_attempts = 1;
  }

  ResponseType type = 1;
  string responding_to_packet_id = 2;
  oneof details {
    UpdateUser update_user = 3;
    CreateMatch create_match = 4;
    UpdateMatch update_match = 5;
    DeleteMatch delete_match = 6;
    CreateQualifierEvent create_qualifier_event = 7;
    UpdateQualifierEvent update_qualifier_event = 8;
    DeleteQualifierEvent delete_qualifier_event = 9;
    AddAuthorizedUser add_authorized_user = 21;
    UpdateAuthorizedUser update_authorized_user = 22;
    RemoveAuthorizedUser remove_authorized_user = 23;
    GetAuthorizedUsers get_authorized_users = 24;
    CreateTournament create_tournament = 10;
    UpdateTournament update_tournament = 11;
    DeleteTournament delete_tournament = 12;
    AddServer add_server = 13;
    Connect connect = 14;
    Join join = 15;
    LeaderboardEntries leaderboard_entries = 16;
    LoadSong load_song = 17;
    PreloadImageForStreamSync preload_image_for_stream_sync = 18;
    ShowModal show_modal = 19;
    RemainingAttempts remaining_attempts = 20;
  }
}